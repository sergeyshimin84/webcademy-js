https://www.youtube.com/watch?v=maPRR_jjyOE

2.1 Типы переменных
! По умолчанию используем const,
когда явно понятно что переменная будет менять свое значение,
тогда let.
var стараемся не использовать.

2.2 Типы переменных
string - строка; 
number - число;
boolean - логическое значение;
null - "пустое" значение;
undefined - неопределено;
Значение undefined возникает по ходу работы программы. 
Чтобы самостоятельно обнулить значаение используем null.   
// Структуры данных:
// - Объекты object 
// - Массивы
typeof - оператор для определения типа переменной.
BigInt - большие числа, больше чем 9007199254740991.
Symbol - уникальное примитивное значение.

3. Операторы сравнения и условия
>, <, >=, <= - больше, меньше, больше либо равно, меньше либо равно
== - нестрогое сравнение
=== - строгое сравнение
!= - нестрогое неравенство
!== - строгое сравнение

if (условие) {
    // Код который будет выполнен если условие верно
} else {
    //  Код который будет выполнен если условие НЕ верно
}

Логические операторы
&& - логическое И
|| - логический ИЛИ
! - логический НЕ

4. Тернарный оператор
(условие) ? (условие верно : (условие не верно);

5. Конкатенация строк и шаблонные строки
конкатенация 'строка' + 'строка'
//Используем обратные ковычки, помещаем переменную в строку
console.log(`Привет, ${userName}! Как твои дела?`);

6. Функции
Следуем принципу DRY - don't repeat yourself (не повторяйся).
//Фунции рекомендуется называть глаголом (какое-то действие).

function имя функции(объявление параметров) {
    выполняемый код
}
имя функции() //запускаем фунцию, обращаемся к ней

Существует два типа функций:
// function decloration
function sayHi() {
    console.log('Привет!');
}

// function expression
const seyHi = function () {
    console.log('Привет!');
}

// Плюс function decloration, ее можно объявить до самой функции (считывается сразу).

6.1 Параметры и аргументы для функций
// const userName = 'Марк';
// console.log(`Привет, ${userName}! Как твои дела`);

function sayHi(name) {
    console.log(`Привет, ${name}! Как твои дела`);
}

sayHi('Марк');
sayHi('Олег');
sayHi('Женя');

6.2 return
function summ(a, b) {
    const result = a + b;
    return result;//после return функция завершает работу
}

let res = summ(15, 20);
console.log(res);

6.3 Функции как аргумент
function summ(a, b) {
    return a + b; //без return вместо аргумента возвращался бы undefined
}

const result = summ(summ(10, 15), summ(20, 20)); //функция передается как аргумент
console.log(result);

// колбэк функция (функция обратного вызова вызываемая в другой функции)
function doSomething(func) {
    let result = func(10, 15);
    console.log(result);
}

doSomething(summ);

6.4 Самовызывающаяся функция IIFE
(function () {//Можно не указывать название (ананимная самовызывающаяся функция) 
    console.log('Привет, дорогой пользователь!');
})();//Сразу вызываем функцию

(function (a, b) {
    console.log(a + b);
})(10, 15);

let res = (function (a, b) {
    return a + b;
})(5, 10);
console.log(res);

6.5 Стрелочные функции
// Пример обычной функции
function sayHi(name) {
    console.log(`Привет, ${name}! Как твои дела?`);
}
sayHi('Марк');

function summ (a, b) {
    const result = a + b;
}
summ(15, 15);

// Стрелочные функции
const sayHi2 = (name) => {
    console.log(`Привет, ${name}! Как твои дела?`);
}
sayHi2('Марк');

const summ2 = (a, b) => {
    return a + b;
}
summ2(10, 15);

// Краткая запись стрелочной функции (без фигурных скобок), в случае если выполняеться одно условие
const sayHi3 = (name) => console.log(`Привет, ${name}! Как твои дела?`);
sayHi3('Марк');

const summ3 = (a, b) => a + b;
summ3(5, 15);

7. Массивы
const autoBrands = ['Audi', 'BMW', 'Mazda', 'Toyota'];
console.log(autoBrands);

// Выведем только Audi
console.log(autoBrands[0]);

// Выводим длину массива
console.log(autoBrands.length);

// Можно вкладывать различные занные и другие массивы (но это плохая практика, необьходимо создавать однородные массивы)
const autoBrands2 = ['Audi', 'BMW', true, ['Mazda', 'Toyota'], 70];
console.log(autoBrands2);

7.1 Методы массивов
//Некоторые базовые методы:
arr.push(items) - Добавить элемент в конец массива
arr.pop() - Удалить элемент из конца массива
arr.shift() - Удалить элемент из начала массива
arr/unshift(...items) - Добавить элемент в начало массива
arr.splice([start]), [deketeCount, newElements])

8. Циклы
console.log('Start');

for (let i = 0; i < 10; i++) {
    console.log(i);
}

console.log('Finish');

9. Обход массива иклом for
const autoBrands = ['Audi', 'BMW', 'Mazda', 'Toyota', 'Nissan']; 
console.log(autoBrands.length);

for (let i = 0; i < autoBrands.length; i++) {
    console.log(autoBrands[i]);
}

10. Обход массива циклом for (of)
const autoBrands = ['Audi', 'BMW', 'Mazda', 'Toyota', 'Nissan']; 
// Все элементы из массива autoBrands попадают в переменную brand
for (let brand of autoBrands) {
    console.log(brand);
}

11. Обход массива методом forEach()
const autoBrands = ['Audi', 'BMW', 'Mazda', 'Toyota', 'Nissan'];
// В переменную brand попадают все элементы массива, в i индекс элемента
// Прописываем функцию в качестве аргумента в forEach
autoBrands.forEach(function (brand, i) {
    console.log(`${brand} => ${i}`);
});

// Пример со стрелоочной функцией
autoBrands.forEach((brand, i) => {
    console.log(`${brand} => ${i}`);
});

// Запись в строчку
autoBrands.forEach((brand, i) => {console.log(`${brand} => ${i}`)});

// Создаем функцию отдельно, передаем в forEach в качестве аргумента
function printBrand (brand, i) {
    console.log(`${brand} => ${i}`);
}
autoBrands.forEach(printBrand);

// Пример со стрелоочной функцией
const printBrand2 = (brand, i) => {
    console.log(`${brand} => ${i}`);
}
autoBrands.forEach(printBrand2);

12. Обьекты
// Свойства объектов
let userName = 'Марк' 
let age = 30;
let isMArried = false;

const person = {
    userName: 'Марк', 
    age: 30,
    isMArried: false
}

console.log(person);
console.log(person.userName);
console.log(person['age']);

// Добавляем свойство объекта
person.profession = 'JS developer';
console.log(person);

// Удаляем свойство
delete person.age;
console.log(person);

13. Методы в объектах
// Метод в который записана функция называется методом объекта 
const person = {
    userName: 'Марк', 
    age: 30,
    isMArried: false,
    sayHi: function () {
        console.log('Привет!');
    }
};
// Вызываеться как функциия
person.sayHi();

const person = {
    userName: 'Марк', 
    age: 30,
    isMArried: false,
    sayHi: function (name) {
        console.log(`Привет, ${name}!`);
    }
};
person.sayHi('Олег');

13. Методы в объектах
// Метод в который записана функция называется методом объекта 
const person = {
    userName: 'Марк', 
    age: 30,
    isMArried: false,
    sayHi: function (name) {
        console.log(`Привет, ${name}!`);
    }
};
// Вызываеться как функциия
person.sayHi('Олег');

14. Ключевое слово this
const person2 = {
    userName: 'Сергей', 
    age: 40,
    isMArried: true,
    sayHi: function (name) {
        console.log(`Привет, ${name}! Меня зовут ${person2.userName}.`);
    }
};
person2.sayHi('Андрей');
// this ссылаеться сразу на объект
const person3 = {
    userName: 'Сергей', 
    age: 40,
    isMArried: true,
    sayHi: function (name) {
        console.log(this);
        console.log(`Привет, ${name}! Меня зовут ${this.userName}.`);
    }
};
person3.sayHi('Андрей');

15. Объекты обход циклом for in
// for in может обходить не итерируемые объекты
const person = {
    userName: 'Сергей', 
    age: 40,
    isMArried: true,
    sayHi: function (yourName) {
        console.log(`Привет, ${yourName}! Меня зовут ${this.userName}.`);
    }
};
person.sayHi('Андрей');

for (let key in person) {
    console.log(key, ':', person[key]);
}

17. Классы. Конструкторы объектов
// Опишем класс, это как шаблон для всех будущих объектов person которые будут создаваться на его основе
class Person {
    // constructor - функция, которая принимает значения
    constructor (userName, age, isMArried) {
        this.userName = userName;
        this.age = age;
        this.isMArried = isMArried;
    }
    // Добавляем новый метод sayHi, он доступен всем объектам на основе класса Person 
    sayHi(yourName) {
        console.log(`Привет, ${yourName}! Меня зовут ${this.userName}.`);
    }
}

const person1 = new Person('Марк', 30, false);
const person2 = new Person('Павел', 28, true);
console.log(person1, person2);
// Используем новый метод seyHi в объектах
person1.sayHi('Юрий');
person2.sayHi('Юрий');
